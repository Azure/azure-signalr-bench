// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Bench.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bench.Common {

  /// <summary>Holder for reflection information generated from Bench.proto</summary>
  public static partial class BenchReflection {

    #region Descriptor
    /// <summary>File descriptor for Bench.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BenchReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtCZW5jaC5wcm90bxIMQmVuY2guQ29tbW9uIuMBChNCZW5jaG1hcmtDZWxs",
            "Q29uZmlnEhMKC3NlcnZpY2VUeXBlGAEgASgJEhUKDXRyYW5zcG9ydFR5cGUY",
            "AiABKAkSEwoLaHViUHJvdG9jb2wYAyABKAkSEAoIc2NlbmFyaW8YBCABKAkS",
            "DAoEc3RlcBgFIAEoCRIUCgxtaXhHcm91cE5hbWUYBiABKAkSGQoRbWl4RWNo",
            "b0Nvbm5lY3Rpb24YByABKAUSHgoWbWl4QnJvYWRjYXN0Q29ubmVjdGlvbhgI",
            "IAEoBRIaChJtaXhHcm91cENvbm5lY3Rpb24YCSABKAUiJQoQQ29ubmVjdGlv",
            "bkNvbmZpZxIRCglncm91cE5hbWUYASABKAkiRwoUQ29ubmVjdGlvbkNvbmZp",
            "Z0xpc3QSLwoHY29uZmlncxgBIAMoCzIeLkJlbmNoLkNvbW1vbi5Db25uZWN0",
            "aW9uQ29uZmlnIiMKBVJhbmdlEg0KBWJlZ2luGAEgASgFEgsKA2VuZBgCIAEo",
            "BSIWCgVGb3JjZRINCgVmb3JjZRgBIAEoCCIiCgRQYWlyEgsKA2tleRgBIAEo",
            "CRINCgV2YWx1ZRgCIAEoBSIpCgREaWN0EiEKBXBhaXJzGAEgAygLMhIuQmVu",
            "Y2guQ29tbW9uLlBhaXIiFQoEUGF0aBINCgVwcGF0aBgBIAEoCSKcAQoNQ2Vs",
            "bEpvYkNvbmZpZxITCgtjb25uZWN0aW9ucxgBIAEoBRIdChVjb25jdXJyZW50",
            "Q29ubmVjdGlvbnMYAiABKAUSDgoGc2xhdmVzGAMgASgFEhAKCGludGVydmFs",
            "GAQgASgFEhAKCGR1cmF0aW9uGAUgASgFEhEKCXNlcnZlclVybBgGIAEoCRIQ",
            "CghwaXBlbGluZRgHIAEoCSL3AwoEU3RhdBInCgVzdGF0ZRgBIAEoDjIYLkJl",
            "bmNoLkNvbW1vbi5TdGF0LlN0YXRlIsUDCgVTdGF0ZRIOCgpERUJVR19UT0RP",
            "EAASFwoTSFVCQ09OTl9VTkNPTk5FQ1RFRBABEhYKEkhVQkNPTk5fQ09OTkVD",
            "VElORxACEhUKEUhVQkNPTk5fQ09OTkVDVEVEEAMSEwoPQ09ORklHX1VOTE9B",
            "REVEEAgSEgoOQ09ORklHX0xPQURJTkcQCRIRCg1DT05GSUdfTE9BREVEEAoS",
            "DgoKU0VORF9SRUFEWRALEhAKDFNFTkRfUlVOTklORxAMEhEKDVNFTkRfQ09N",
            "UExFVEUQDRISCg5XT1JLRVJfVU5FWElTVBAOEhMKD1dPUktFUl9DUkVBVElO",
            "RxAPEhIKDldPUktFUl9DUkVBVEVEEBASEgoOV09SS0VSX0VYSVNURUQQERIV",
            "ChFIVUJDT05OX1VOQ1JFQVRFRBASEhQKEEhVQkNPTk5fQ1JFQVRJTkcQExIT",
            "Cg9IVUJDT05OX0NSRUFURUQQFBIZChVIVUJDT05OX0RJU0NPTk5FQ1RJTkcQ",
            "GBIYChRIVUJDT05OX0RJU0NPTk5FQ1RFRBAZEhUKEUhVQkNPTk5fRElTUE9T",
            "SU5HEBoSFAoQSFVCQ09OTl9ESVNQT1NFRBAbIhMKBFN0cmcSCwoDc3RyGAEg",
            "ASgJIhkKCVRpbWVzdGFtcBIMCgR0aW1lGAEgASgEIgcKBUVtcHR5MosFCgpS",
            "cGNTZXJ2aWNlEj4KDEdldFRpbWVzdGFtcBITLkJlbmNoLkNvbW1vbi5FbXB0",
            "eRoXLkJlbmNoLkNvbW1vbi5UaW1lc3RhbXAiABI+ChFHZXRDb3VudGVySnNv",
            "blN0chITLkJlbmNoLkNvbW1vbi5FbXB0eRoSLkJlbmNoLkNvbW1vbi5TdHJn",
            "IgASNQoIR2V0U3RhdGUSEy5CZW5jaC5Db21tb24uRW1wdHkaEi5CZW5jaC5D",
            "b21tb24uU3RhdCIAEkIKDUxvYWRKb2JDb25maWcSGy5CZW5jaC5Db21tb24u",
            "Q2VsbEpvYkNvbmZpZxoSLkJlbmNoLkNvbW1vbi5TdGF0IgASOQoMQ3JlYXRl",
            "V29ya2VyEhMuQmVuY2guQ29tbW9uLkVtcHR5GhIuQmVuY2guQ29tbW9uLlN0",
            "YXQiABI8Cg9Db2xsZWN0Q291bnRlcnMSEy5CZW5jaC5Db21tb24uRm9yY2Ua",
            "Ei5CZW5jaC5Db21tb24uRGljdCIAEkEKBlJ1bkpvYhIhLkJlbmNoLkNvbW1v",
            "bi5CZW5jaG1hcmtDZWxsQ29uZmlnGhIuQmVuY2guQ29tbW9uLlN0YXQiABIw",
            "CgRUZXN0EhIuQmVuY2guQ29tbW9uLlN0cmcaEi5CZW5jaC5Db21tb24uU3Rh",
            "dCIAElEKFExvYWRDb25uZWN0aW9uQ29uZmlnEiIuQmVuY2guQ29tbW9uLkNv",
            "bm5lY3Rpb25Db25maWdMaXN0GhMuQmVuY2guQ29tbW9uLkVtcHR5IgASQQoT",
            "TG9hZENvbm5lY3Rpb25SYW5nZRITLkJlbmNoLkNvbW1vbi5SYW5nZRoTLkJl",
            "bmNoLkNvbW1vbi5FbXB0eSIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bench.Common.BenchmarkCellConfig), global::Bench.Common.BenchmarkCellConfig.Parser, new[]{ "ServiceType", "TransportType", "HubProtocol", "Scenario", "Step", "MixGroupName", "MixEchoConnection", "MixBroadcastConnection", "MixGroupConnection" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bench.Common.ConnectionConfig), global::Bench.Common.ConnectionConfig.Parser, new[]{ "GroupName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bench.Common.ConnectionConfigList), global::Bench.Common.ConnectionConfigList.Parser, new[]{ "Configs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bench.Common.Range), global::Bench.Common.Range.Parser, new[]{ "Begin", "End" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bench.Common.Force), global::Bench.Common.Force.Parser, new[]{ "Force_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bench.Common.Pair), global::Bench.Common.Pair.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bench.Common.Dict), global::Bench.Common.Dict.Parser, new[]{ "Pairs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bench.Common.Path), global::Bench.Common.Path.Parser, new[]{ "Ppath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bench.Common.CellJobConfig), global::Bench.Common.CellJobConfig.Parser, new[]{ "Connections", "ConcurrentConnections", "Slaves", "Interval", "Duration", "ServerUrl", "Pipeline" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bench.Common.Stat), global::Bench.Common.Stat.Parser, new[]{ "State" }, null, new[]{ typeof(global::Bench.Common.Stat.Types.State) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bench.Common.Strg), global::Bench.Common.Strg.Parser, new[]{ "Str" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bench.Common.Timestamp), global::Bench.Common.Timestamp.Parser, new[]{ "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bench.Common.Empty), global::Bench.Common.Empty.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BenchmarkCellConfig : pb::IMessage<BenchmarkCellConfig> {
    private static readonly pb::MessageParser<BenchmarkCellConfig> _parser = new pb::MessageParser<BenchmarkCellConfig>(() => new BenchmarkCellConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BenchmarkCellConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bench.Common.BenchReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BenchmarkCellConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BenchmarkCellConfig(BenchmarkCellConfig other) : this() {
      serviceType_ = other.serviceType_;
      transportType_ = other.transportType_;
      hubProtocol_ = other.hubProtocol_;
      scenario_ = other.scenario_;
      step_ = other.step_;
      mixGroupName_ = other.mixGroupName_;
      mixEchoConnection_ = other.mixEchoConnection_;
      mixBroadcastConnection_ = other.mixBroadcastConnection_;
      mixGroupConnection_ = other.mixGroupConnection_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BenchmarkCellConfig Clone() {
      return new BenchmarkCellConfig(this);
    }

    /// <summary>Field number for the "serviceType" field.</summary>
    public const int ServiceTypeFieldNumber = 1;
    private string serviceType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceType {
      get { return serviceType_; }
      set {
        serviceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transportType" field.</summary>
    public const int TransportTypeFieldNumber = 2;
    private string transportType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TransportType {
      get { return transportType_; }
      set {
        transportType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hubProtocol" field.</summary>
    public const int HubProtocolFieldNumber = 3;
    private string hubProtocol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HubProtocol {
      get { return hubProtocol_; }
      set {
        hubProtocol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scenario" field.</summary>
    public const int ScenarioFieldNumber = 4;
    private string scenario_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Scenario {
      get { return scenario_; }
      set {
        scenario_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 5;
    private string step_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Step {
      get { return step_; }
      set {
        step_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mixGroupName" field.</summary>
    public const int MixGroupNameFieldNumber = 6;
    private string mixGroupName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MixGroupName {
      get { return mixGroupName_; }
      set {
        mixGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mixEchoConnection" field.</summary>
    public const int MixEchoConnectionFieldNumber = 7;
    private int mixEchoConnection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MixEchoConnection {
      get { return mixEchoConnection_; }
      set {
        mixEchoConnection_ = value;
      }
    }

    /// <summary>Field number for the "mixBroadcastConnection" field.</summary>
    public const int MixBroadcastConnectionFieldNumber = 8;
    private int mixBroadcastConnection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MixBroadcastConnection {
      get { return mixBroadcastConnection_; }
      set {
        mixBroadcastConnection_ = value;
      }
    }

    /// <summary>Field number for the "mixGroupConnection" field.</summary>
    public const int MixGroupConnectionFieldNumber = 9;
    private int mixGroupConnection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MixGroupConnection {
      get { return mixGroupConnection_; }
      set {
        mixGroupConnection_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BenchmarkCellConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BenchmarkCellConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceType != other.ServiceType) return false;
      if (TransportType != other.TransportType) return false;
      if (HubProtocol != other.HubProtocol) return false;
      if (Scenario != other.Scenario) return false;
      if (Step != other.Step) return false;
      if (MixGroupName != other.MixGroupName) return false;
      if (MixEchoConnection != other.MixEchoConnection) return false;
      if (MixBroadcastConnection != other.MixBroadcastConnection) return false;
      if (MixGroupConnection != other.MixGroupConnection) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceType.Length != 0) hash ^= ServiceType.GetHashCode();
      if (TransportType.Length != 0) hash ^= TransportType.GetHashCode();
      if (HubProtocol.Length != 0) hash ^= HubProtocol.GetHashCode();
      if (Scenario.Length != 0) hash ^= Scenario.GetHashCode();
      if (Step.Length != 0) hash ^= Step.GetHashCode();
      if (MixGroupName.Length != 0) hash ^= MixGroupName.GetHashCode();
      if (MixEchoConnection != 0) hash ^= MixEchoConnection.GetHashCode();
      if (MixBroadcastConnection != 0) hash ^= MixBroadcastConnection.GetHashCode();
      if (MixGroupConnection != 0) hash ^= MixGroupConnection.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceType);
      }
      if (TransportType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TransportType);
      }
      if (HubProtocol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HubProtocol);
      }
      if (Scenario.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Scenario);
      }
      if (Step.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Step);
      }
      if (MixGroupName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(MixGroupName);
      }
      if (MixEchoConnection != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MixEchoConnection);
      }
      if (MixBroadcastConnection != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MixBroadcastConnection);
      }
      if (MixGroupConnection != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MixGroupConnection);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceType);
      }
      if (TransportType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransportType);
      }
      if (HubProtocol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HubProtocol);
      }
      if (Scenario.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Scenario);
      }
      if (Step.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Step);
      }
      if (MixGroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MixGroupName);
      }
      if (MixEchoConnection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MixEchoConnection);
      }
      if (MixBroadcastConnection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MixBroadcastConnection);
      }
      if (MixGroupConnection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MixGroupConnection);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BenchmarkCellConfig other) {
      if (other == null) {
        return;
      }
      if (other.ServiceType.Length != 0) {
        ServiceType = other.ServiceType;
      }
      if (other.TransportType.Length != 0) {
        TransportType = other.TransportType;
      }
      if (other.HubProtocol.Length != 0) {
        HubProtocol = other.HubProtocol;
      }
      if (other.Scenario.Length != 0) {
        Scenario = other.Scenario;
      }
      if (other.Step.Length != 0) {
        Step = other.Step;
      }
      if (other.MixGroupName.Length != 0) {
        MixGroupName = other.MixGroupName;
      }
      if (other.MixEchoConnection != 0) {
        MixEchoConnection = other.MixEchoConnection;
      }
      if (other.MixBroadcastConnection != 0) {
        MixBroadcastConnection = other.MixBroadcastConnection;
      }
      if (other.MixGroupConnection != 0) {
        MixGroupConnection = other.MixGroupConnection;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceType = input.ReadString();
            break;
          }
          case 18: {
            TransportType = input.ReadString();
            break;
          }
          case 26: {
            HubProtocol = input.ReadString();
            break;
          }
          case 34: {
            Scenario = input.ReadString();
            break;
          }
          case 42: {
            Step = input.ReadString();
            break;
          }
          case 50: {
            MixGroupName = input.ReadString();
            break;
          }
          case 56: {
            MixEchoConnection = input.ReadInt32();
            break;
          }
          case 64: {
            MixBroadcastConnection = input.ReadInt32();
            break;
          }
          case 72: {
            MixGroupConnection = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectionConfig : pb::IMessage<ConnectionConfig> {
    private static readonly pb::MessageParser<ConnectionConfig> _parser = new pb::MessageParser<ConnectionConfig>(() => new ConnectionConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bench.Common.BenchReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionConfig(ConnectionConfig other) : this() {
      groupName_ = other.groupName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionConfig Clone() {
      return new ConnectionConfig(this);
    }

    /// <summary>Field number for the "groupName" field.</summary>
    public const int GroupNameFieldNumber = 1;
    private string groupName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupName {
      get { return groupName_; }
      set {
        groupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupName != other.GroupName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupName.Length != 0) hash ^= GroupName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionConfig other) {
      if (other == null) {
        return;
      }
      if (other.GroupName.Length != 0) {
        GroupName = other.GroupName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GroupName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectionConfigList : pb::IMessage<ConnectionConfigList> {
    private static readonly pb::MessageParser<ConnectionConfigList> _parser = new pb::MessageParser<ConnectionConfigList>(() => new ConnectionConfigList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionConfigList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bench.Common.BenchReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionConfigList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionConfigList(ConnectionConfigList other) : this() {
      configs_ = other.configs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionConfigList Clone() {
      return new ConnectionConfigList(this);
    }

    /// <summary>Field number for the "configs" field.</summary>
    public const int ConfigsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bench.Common.ConnectionConfig> _repeated_configs_codec
        = pb::FieldCodec.ForMessage(10, global::Bench.Common.ConnectionConfig.Parser);
    private readonly pbc::RepeatedField<global::Bench.Common.ConnectionConfig> configs_ = new pbc::RepeatedField<global::Bench.Common.ConnectionConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bench.Common.ConnectionConfig> Configs {
      get { return configs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionConfigList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionConfigList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!configs_.Equals(other.configs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= configs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      configs_.WriteTo(output, _repeated_configs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += configs_.CalculateSize(_repeated_configs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionConfigList other) {
      if (other == null) {
        return;
      }
      configs_.Add(other.configs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            configs_.AddEntriesFrom(input, _repeated_configs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Range : pb::IMessage<Range> {
    private static readonly pb::MessageParser<Range> _parser = new pb::MessageParser<Range>(() => new Range());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Range> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bench.Common.BenchReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Range() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Range(Range other) : this() {
      begin_ = other.begin_;
      end_ = other.end_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Range Clone() {
      return new Range(this);
    }

    /// <summary>Field number for the "begin" field.</summary>
    public const int BeginFieldNumber = 1;
    private int begin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Begin {
      get { return begin_; }
      set {
        begin_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 2;
    private int end_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Range);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Range other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Begin != other.Begin) return false;
      if (End != other.End) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Begin != 0) hash ^= Begin.GetHashCode();
      if (End != 0) hash ^= End.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Begin != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Begin);
      }
      if (End != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(End);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Begin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Begin);
      }
      if (End != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(End);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Range other) {
      if (other == null) {
        return;
      }
      if (other.Begin != 0) {
        Begin = other.Begin;
      }
      if (other.End != 0) {
        End = other.End;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Begin = input.ReadInt32();
            break;
          }
          case 16: {
            End = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Force : pb::IMessage<Force> {
    private static readonly pb::MessageParser<Force> _parser = new pb::MessageParser<Force>(() => new Force());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Force> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bench.Common.BenchReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Force() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Force(Force other) : this() {
      force_ = other.force_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Force Clone() {
      return new Force(this);
    }

    /// <summary>Field number for the "force" field.</summary>
    public const int Force_FieldNumber = 1;
    private bool force_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Force_ {
      get { return force_; }
      set {
        force_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Force);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Force other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Force_ != other.Force_) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Force_ != false) hash ^= Force_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Force_ != false) {
        output.WriteRawTag(8);
        output.WriteBool(Force_);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Force_ != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Force other) {
      if (other == null) {
        return;
      }
      if (other.Force_ != false) {
        Force_ = other.Force_;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Force_ = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Pair : pb::IMessage<Pair> {
    private static readonly pb::MessageParser<Pair> _parser = new pb::MessageParser<Pair>(() => new Pair());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bench.Common.BenchReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pair(Pair other) : this() {
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pair Clone() {
      return new Pair(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pair other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Dict : pb::IMessage<Dict> {
    private static readonly pb::MessageParser<Dict> _parser = new pb::MessageParser<Dict>(() => new Dict());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dict> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bench.Common.BenchReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dict() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dict(Dict other) : this() {
      pairs_ = other.pairs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dict Clone() {
      return new Dict(this);
    }

    /// <summary>Field number for the "pairs" field.</summary>
    public const int PairsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bench.Common.Pair> _repeated_pairs_codec
        = pb::FieldCodec.ForMessage(10, global::Bench.Common.Pair.Parser);
    private readonly pbc::RepeatedField<global::Bench.Common.Pair> pairs_ = new pbc::RepeatedField<global::Bench.Common.Pair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bench.Common.Pair> Pairs {
      get { return pairs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dict);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dict other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pairs_.Equals(other.pairs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pairs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pairs_.WriteTo(output, _repeated_pairs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pairs_.CalculateSize(_repeated_pairs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dict other) {
      if (other == null) {
        return;
      }
      pairs_.Add(other.pairs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            pairs_.AddEntriesFrom(input, _repeated_pairs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Path : pb::IMessage<Path> {
    private static readonly pb::MessageParser<Path> _parser = new pb::MessageParser<Path>(() => new Path());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Path> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bench.Common.BenchReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Path() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Path(Path other) : this() {
      ppath_ = other.ppath_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Path Clone() {
      return new Path(this);
    }

    /// <summary>Field number for the "ppath" field.</summary>
    public const int PpathFieldNumber = 1;
    private string ppath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ppath {
      get { return ppath_; }
      set {
        ppath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Path);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Path other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ppath != other.Ppath) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ppath.Length != 0) hash ^= Ppath.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ppath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ppath);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ppath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ppath);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Path other) {
      if (other == null) {
        return;
      }
      if (other.Ppath.Length != 0) {
        Ppath = other.Ppath;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Ppath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellJobConfig : pb::IMessage<CellJobConfig> {
    private static readonly pb::MessageParser<CellJobConfig> _parser = new pb::MessageParser<CellJobConfig>(() => new CellJobConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellJobConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bench.Common.BenchReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellJobConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellJobConfig(CellJobConfig other) : this() {
      connections_ = other.connections_;
      concurrentConnections_ = other.concurrentConnections_;
      slaves_ = other.slaves_;
      interval_ = other.interval_;
      duration_ = other.duration_;
      serverUrl_ = other.serverUrl_;
      pipeline_ = other.pipeline_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellJobConfig Clone() {
      return new CellJobConfig(this);
    }

    /// <summary>Field number for the "connections" field.</summary>
    public const int ConnectionsFieldNumber = 1;
    private int connections_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Connections {
      get { return connections_; }
      set {
        connections_ = value;
      }
    }

    /// <summary>Field number for the "concurrentConnections" field.</summary>
    public const int ConcurrentConnectionsFieldNumber = 2;
    private int concurrentConnections_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConcurrentConnections {
      get { return concurrentConnections_; }
      set {
        concurrentConnections_ = value;
      }
    }

    /// <summary>Field number for the "slaves" field.</summary>
    public const int SlavesFieldNumber = 3;
    private int slaves_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Slaves {
      get { return slaves_; }
      set {
        slaves_ = value;
      }
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 4;
    private int interval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 5;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "serverUrl" field.</summary>
    public const int ServerUrlFieldNumber = 6;
    private string serverUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerUrl {
      get { return serverUrl_; }
      set {
        serverUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pipeline" field.</summary>
    public const int PipelineFieldNumber = 7;
    private string pipeline_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pipeline {
      get { return pipeline_; }
      set {
        pipeline_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellJobConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellJobConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Connections != other.Connections) return false;
      if (ConcurrentConnections != other.ConcurrentConnections) return false;
      if (Slaves != other.Slaves) return false;
      if (Interval != other.Interval) return false;
      if (Duration != other.Duration) return false;
      if (ServerUrl != other.ServerUrl) return false;
      if (Pipeline != other.Pipeline) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Connections != 0) hash ^= Connections.GetHashCode();
      if (ConcurrentConnections != 0) hash ^= ConcurrentConnections.GetHashCode();
      if (Slaves != 0) hash ^= Slaves.GetHashCode();
      if (Interval != 0) hash ^= Interval.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (ServerUrl.Length != 0) hash ^= ServerUrl.GetHashCode();
      if (Pipeline.Length != 0) hash ^= Pipeline.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Connections != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Connections);
      }
      if (ConcurrentConnections != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConcurrentConnections);
      }
      if (Slaves != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Slaves);
      }
      if (Interval != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Interval);
      }
      if (Duration != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Duration);
      }
      if (ServerUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ServerUrl);
      }
      if (Pipeline.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Pipeline);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Connections != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Connections);
      }
      if (ConcurrentConnections != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConcurrentConnections);
      }
      if (Slaves != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slaves);
      }
      if (Interval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Interval);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (ServerUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerUrl);
      }
      if (Pipeline.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pipeline);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellJobConfig other) {
      if (other == null) {
        return;
      }
      if (other.Connections != 0) {
        Connections = other.Connections;
      }
      if (other.ConcurrentConnections != 0) {
        ConcurrentConnections = other.ConcurrentConnections;
      }
      if (other.Slaves != 0) {
        Slaves = other.Slaves;
      }
      if (other.Interval != 0) {
        Interval = other.Interval;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.ServerUrl.Length != 0) {
        ServerUrl = other.ServerUrl;
      }
      if (other.Pipeline.Length != 0) {
        Pipeline = other.Pipeline;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Connections = input.ReadInt32();
            break;
          }
          case 16: {
            ConcurrentConnections = input.ReadInt32();
            break;
          }
          case 24: {
            Slaves = input.ReadInt32();
            break;
          }
          case 32: {
            Interval = input.ReadInt32();
            break;
          }
          case 40: {
            Duration = input.ReadInt32();
            break;
          }
          case 50: {
            ServerUrl = input.ReadString();
            break;
          }
          case 58: {
            Pipeline = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Stat : pb::IMessage<Stat> {
    private static readonly pb::MessageParser<Stat> _parser = new pb::MessageParser<Stat>(() => new Stat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Stat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bench.Common.BenchReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stat(Stat other) : this() {
      state_ = other.state_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stat Clone() {
      return new Stat(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Bench.Common.Stat.Types.State state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bench.Common.Stat.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Stat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Stat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Stat other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state_ = (global::Bench.Common.Stat.Types.State) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Stat message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum State {
        [pbr::OriginalName("DEBUG_TODO")] DebugTodo = 0,
        [pbr::OriginalName("HUBCONN_UNCONNECTED")] HubconnUnconnected = 1,
        [pbr::OriginalName("HUBCONN_CONNECTING")] HubconnConnecting = 2,
        [pbr::OriginalName("HUBCONN_CONNECTED")] HubconnConnected = 3,
        [pbr::OriginalName("CONFIG_UNLOADED")] ConfigUnloaded = 8,
        [pbr::OriginalName("CONFIG_LOADING")] ConfigLoading = 9,
        [pbr::OriginalName("CONFIG_LOADED")] ConfigLoaded = 10,
        [pbr::OriginalName("SEND_READY")] SendReady = 11,
        [pbr::OriginalName("SEND_RUNNING")] SendRunning = 12,
        [pbr::OriginalName("SEND_COMPLETE")] SendComplete = 13,
        [pbr::OriginalName("WORKER_UNEXIST")] WorkerUnexist = 14,
        [pbr::OriginalName("WORKER_CREATING")] WorkerCreating = 15,
        [pbr::OriginalName("WORKER_CREATED")] WorkerCreated = 16,
        [pbr::OriginalName("WORKER_EXISTED")] WorkerExisted = 17,
        [pbr::OriginalName("HUBCONN_UNCREATED")] HubconnUncreated = 18,
        [pbr::OriginalName("HUBCONN_CREATING")] HubconnCreating = 19,
        [pbr::OriginalName("HUBCONN_CREATED")] HubconnCreated = 20,
        [pbr::OriginalName("HUBCONN_DISCONNECTING")] HubconnDisconnecting = 24,
        [pbr::OriginalName("HUBCONN_DISCONNECTED")] HubconnDisconnected = 25,
        [pbr::OriginalName("HUBCONN_DISPOSING")] HubconnDisposing = 26,
        [pbr::OriginalName("HUBCONN_DISPOSED")] HubconnDisposed = 27,
      }

    }
    #endregion

  }

  public sealed partial class Strg : pb::IMessage<Strg> {
    private static readonly pb::MessageParser<Strg> _parser = new pb::MessageParser<Strg>(() => new Strg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Strg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bench.Common.BenchReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Strg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Strg(Strg other) : this() {
      str_ = other.str_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Strg Clone() {
      return new Strg(this);
    }

    /// <summary>Field number for the "str" field.</summary>
    public const int StrFieldNumber = 1;
    private string str_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Str {
      get { return str_; }
      set {
        str_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Strg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Strg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Str != other.Str) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Str.Length != 0) hash ^= Str.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Str.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Str);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Str.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Str);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Strg other) {
      if (other == null) {
        return;
      }
      if (other.Str.Length != 0) {
        Str = other.Str;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Str = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Timestamp : pb::IMessage<Timestamp> {
    private static readonly pb::MessageParser<Timestamp> _parser = new pb::MessageParser<Timestamp>(() => new Timestamp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Timestamp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bench.Common.BenchReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp(Timestamp other) : this() {
      time_ = other.time_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp Clone() {
      return new Timestamp(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private ulong time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Timestamp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Timestamp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0UL) hash ^= Time.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Timestamp other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0UL) {
        Time = other.Time;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Time = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Empty : pb::IMessage<Empty> {
    private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Empty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bench.Common.BenchReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty(Empty other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty Clone() {
      return new Empty(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Empty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Empty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Empty other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
